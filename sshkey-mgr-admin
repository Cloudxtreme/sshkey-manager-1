#!/bin/bash
mgr_dir=`cd $(dirname $0);pwd`
key_dir="$mgr_dir/sshkey"


source $mgr_dir/lib.sh


function Usage() {
    echo "$0 { list | gen <name> | deploy-c <name> | deploy-s <name> | restore-c <name> | restore-s <name> | upload <name> <storage> | fetch <storage> <name>/all }"
    exit 1
}

function Generate_key() {
    name="$1"
    mkdir -p $key_dir/$name

    hint "generate ssh key"
    ssh-keygen -t rsa -f $key_dir/$name/$name
    
    hint "generate ssh configuration"
    configuration="$key_dir/$name/$name.conf"

    read -p "User name: " user
    read -p "server ip: " ip

    cp $key_dir/config_tem $configuration

    sed -i "s/IP/$ip/g" $configuration
    sed -i "s/NAME/$name/g" $configuration
    sed -i "s/USER/$user/g" $configuration
}

function Deploy_Server() {
    name="$1"
    # scp pub key to server
    hint "sent public key to server"
    ssh-keygen -f "$HOME/.ssh/known_hosts" -R $name
    ssh-copy-id -i $key_dir/$name/$name $name
}

function Restore_Server() {
    name="$1"

    hint "remove the public in server"
    pub_key=`cat $key_dir/$name/$name.pub`
    ssh $name -C "sed -i 's#$pub_key# #' ~/.ssh/authorized_keys"
}

function Upload() {
    key_name="$1"
    direction="$2"
    if [ ! -d $key_dir/$key_name ];then
        echo "No such key!"
        exit 1
    fi
    scp -r $key_dir/$key_name $direction
}


case "$1" in 
    gen)
        Parameter_judge 2 $#
        Generate_key $2
        ;;

    deploy-c)
        Parameter_judge 2 $#
        Deploy_Client $2
        ;;

    deploy-s)
        Parameter_judge 2 $#
        Deploy_Server $2
        ;;

    restore-c)
        Parameter_judge 2 $#
        Restore_Client $2
        ;;

    restore-s)
        Parameter_judge 2 $#
        Restore_Server $2
        ;;

    list)
        Parameter_judge 1 $#
        List
        ;;

    upload)
        Parameter_judge 3 $#
        Upload $2 $3
        ;;

    fetch)
        Parameter_judge 3 $#
        Fetch $2 $3
        ;;

    *)
        Usage
        ;;
esac



